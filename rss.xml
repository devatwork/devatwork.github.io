<?xml version="1.0" encoding="UTF-8"?>
<rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title><![CDATA[Dev @ Work]]></title>
        <description><![CDATA[A day in the life of a developer]]></description>
        <link>http://devatwork.nl</link>
        <generator>RSS for Node</generator>
        <lastBuildDate>Fri, 07 Mar 2014 11:30:23 GMT</lastBuildDate>
        <atom:link href="http://devatwork.nl/rss.xml" rel="self" type="application/rss+xml"/>
        <author><![CDATA[Bert Willems]]></author>
        <pubDate>Fri, 07 Mar 2014 11:30:08 GMT</pubDate>
        <item>
            <title><![CDATA[Bye old stack, hello 2014 stack]]></title>
            <description><![CDATA[<p>Since it is a new year, I felt like getting rid of old broken stuff, which no longer works for me, and replace it with new stuff. Today I did two things: migrate my email from Exchange to Google Apps and this blog from WordPress to DocPad. </p><p>The reason why I migrated my personal mail from Microsoft Exchange is that my Android smartphone could no longer sync with Microsoft ActiveSync and given that I need my mail on my phone I faced a dilemma: Either get a new phone or switch to a different mail provider. I chose the switch. Although this is pure vendor lock-in, in this case I don't particularly care because I love the Google Apps. The user experience of GMail works like I would expect from a modern web application. It is years ahead compared to the Outlook Web Access interface I had been using up until now.</p><p>The second thing I did was migrating this weblog from WordPress to DocPad. The main reason is that I am going to revive this blog because its is going to be an exciting year! I will be learning new technologies & skills and I will face new problems to tackle. On this blog I will share my experiences.</p><p>I choose DocPad above WordPress, or other existing blog platforms, because of an experience I had with RevealJS a few weeks ago: I had to give a talk about continuous deployment and I needed some slides. As a developer I didn't want to use PowerPoint, because it always makes me focus on the look and feel. So I decided to try <a href="https://github.com/hakimel/reveal.js/">RevealJS</a> and it just worked for me: within 15 minutes I had my slides ready and it even looked fancy. I learned that writing Markdown allowed me to focus more on the task at hand, because I could see the content structure without having to worry about the actual presentation!</p><p>Both migrations enable me to get more stuff done in less time, so basically this is performance optimization and garbage collection in one.</p><p>So why is this relevant? Starting this year, after a ramp-up period of 3 months, we @<a href="http://www.fontoxml.com/" title="FontoXML - Web-based XML editor">FontoXML</a>, will start full-speed development of our online XML and DITA editor. Both applications require a cutting edge user experience in order to provide a next generation authoring experience.</p><p>Stay tuned for updates!</p>]]></description>
            <link>http://devatwork.nl/posts/2014/bye-old-stack-hello-new-stack</link>
            <guid isPermaLink="true">http://devatwork.nl/posts/2014/bye-old-stack-hello-new-stack</guid>
            <dc:creator><![CDATA[Bert Willems]]></dc:creator>
            <pubDate>Wed, 01 Jan 2014 00:00:00 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[Software Complexity – Decomposing an Application]]></title>
            <description><![CDATA[<p>Inspired by a talk from <a title="Thomas Thwaites" href="http://www.ted.com/speakers/thomas_thwaites.html">Thomas Thwaites</a> about the complexity of creating a simple toaster from scratch, I thought it would be a nice idea to decompose an application I recently build to give you an indication of the complexity.</p><p>But first let's watch Thomas's talk:</p><object width="446" height="326" classid="clsid:d27cdb6e-ae6d-11cf-96b8-444553540000" codebase="http://download.macromedia.com/pub/shockwave/cabs/flash/swflash.cab#version=6,0,40,0" bgcolor="#ffffff"><param name="allowFullScreen" value="true" /><param name="allowScriptAccess" value="always" /><param name="wmode" value="transparent" /><param name="bgColor" value="#ffffff" /><param name="flashvars" value="vu=http://video.ted.com/talks/dynamic/ThomasThwaites_2010S-medium.flv&amp;su=http://images.ted.com/images/ted/tedindex/embed-posters/ThomasThwaites-2010S.embed_thumbnail.jpg&amp;vw=432&amp;vh=240&amp;ap=0&amp;ti=1051&amp;introDuration=15330&amp;adDuration=4000&amp;postAdDuration=830&amp;adKeys=talk=thomas_thwaites_how_i_built_a_toaster_from_scratch;year=2010;theme=tales_of_invention;theme=new_on_ted_com;theme=the_creative_spark;event=TEDSalon+London+2010;&amp;preAdTag=tconf.ted/embed;tile=1;sz=512x288;" /><param name="src" value="http://video.ted.com/assets/player/swf/EmbedPlayer.swf" /><param name="allowfullscreen" value="true" /><param name="allowscriptaccess" value="always" /><embed width="446" height="326" type="application/x-shockwave-flash" src="http://video.ted.com/assets/player/swf/EmbedPlayer.swf" allowFullScreen="true" allowScriptAccess="always" wmode="transparent" bgColor="#ffffff" flashvars="vu=http://video.ted.com/talks/dynamic/ThomasThwaites_2010S-medium.flv&amp;su=http://images.ted.com/images/ted/tedindex/embed-posters/ThomasThwaites-2010S.embed_thumbnail.jpg&amp;vw=432&amp;vh=240&amp;ap=0&amp;ti=1051&amp;introDuration=15330&amp;adDuration=4000&amp;postAdDuration=830&amp;adKeys=talk=thomas_thwaites_how_i_built_a_toaster_from_scratch;year=2010;theme=tales_of_invention;theme=new_on_ted_com;theme=the_creative_spark;event=TEDSalon+London+2010;&amp;preAdTag=tconf.ted/embed;tile=1;sz=512x288;" allowfullscreen="true" allowscriptaccess="always" bgcolor="#ffffff" /></object><p>I will use the <a title="Building Kluwer Support Portal – a Developers Perspective" href="/posts/2010/building-kluwer-support-portal">Kluwer Support portal I recently built</a> as an example. I created a new <a title="Portlet- Wikipedia" href="http://en.wikipedia.org/wiki/Portlet" target="_blank">portlet </a>which was deployed into <a title="Liferay - Wikipedia" href="http://en.wikipedia.org/wiki/Liferay" target="_blank">Liferay</a>, an enterprise portal, which runs on top of the <a title="JBoss AS - Wikipedia" href="http://en.wikipedia.org/wiki/JBoss_Application_Server" target="_blank">JBoss Application Server</a> which is programmed in <a title="Java Programming Language - Wikipedia" href="http://en.wikipedia.org/wiki/Java_(programming_language)" target="_blank">Java </a>running on the <a title="Java Virtual Machine - Wikipedia" href="http://en.wikipedia.org/wiki/Java_Virtual_Machine" target="_blank">Java Virtual Machine</a> running on top of the <a title="CentOS - Wikipedia" href="http://en.wikipedia.org/wiki/CentOS" target="_blank">CentOS </a>operating system running on top of an <a title="Hardware Abstraction Layer - Wikipedia" href="http://en.wikipedia.org/wiki/Hardware_Abstraction_Layer" target="_blank">Hardware Abstraction Layer</a> running on top of <a title="Computer hardware - Wikipedia" href="http://en.wikipedia.org/wiki/Computer_hardware" target="_blank">hardware</a>. Liferay uses <a title="Spring framework - Wikipedia" href="http://en.wikipedia.org/wiki/Spring_Framework" target="_blank">Spring</a> to inject services  in my portlet which retrieve data through <a title="Hibernate ORM - Wikipedia" href="http://en.wikipedia.org/wiki/Hibernate_(Java)" target="_blank">Hibernate</a> from <a title="MySQL - Wikipedia" href="http://en.wikipedia.org/wiki/MySQL" target="_blank">MySQL</a>.</p><p>In order to implement the customer requirements the portlet had to use Spring to separate presentation from business logic which connect to a <a title="Simple Object Access Protocol - Wikipedia" href="http://en.wikipedia.org/wiki/SOAP" target="_blank">SOAP web service</a> through <a title="Hypertext Transfer Protocol - Wikipedia" href="http://en.wikipedia.org/wiki/Http" target="_blank">HTTP</a> using <a title="Apache Axis - Wikipedia" href="http://en.wikipedia.org/wiki/Apache_Axis" target="_blank">Axis</a> in order to retrieve data which was index by <a title="Apache Solr - Wikipedia" href="http://en.wikipedia.org/wiki/Solr" target="_blank">Solr</a>, a <a title="Apache Lucene - Wikipedia" href="http://en.wikipedia.org/wiki/Lucene" target="_blank">Lucene</a> based search server in order to be able to render a search form using <a title="JavaServer Pages" href="http://en.wikipedia.org/wiki/Javaserver_pages" target="_blank">JavaServer Pages</a> and <a title="Apache Velocity - Wikipedia" href="http://en.wikipedia.org/wiki/Apache_Velocity" target="_blank">Velocity</a> as <a title="HyperText Markup Language - Wikipedia" href="http://en.wikipedia.org/wiki/Html" target="_blank">HTML</a> which is styled using <a title="Cascading Style Sheets - Wikipedia" href="http://en.wikipedia.org/wiki/Css" target="_blank">CSS</a> and made interactively using <a title="JavaScript - Wikipedia" href="http://en.wikipedia.org/wiki/JavaScript" target="_blank">JavaScript</a>.</p><p>If this technological enumeration (a total of 21) makes your head spin you got another thing coming because I only scratched the surface. I estimate it took an army of a million computer scientists over a billion man-hours to make this application work. A small miracle in my opinion!</p>]]></description>
            <link>http://devatwork.nl/posts/2011/software-complexity</link>
            <guid isPermaLink="true">http://devatwork.nl/posts/2011/software-complexity</guid>
            <dc:creator><![CDATA[Bert Willems]]></dc:creator>
            <pubDate>Fri, 14 Jan 2011 00:00:00 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[Solving the Portlet Design Problem]]></title>
            <description><![CDATA[<p>In my <a title="Building Kluwer Support Portal – a Developers Perspective" href="/posts/2010/building-kluwer-support-portal">previous post</a> I told you about the problem we encountered while implementing the <a title="Kluwer Support" href="http://support.kluwer.nl/" target="_blank">Kluwer Support</a> portal in <a title="Enterprise open source portal and collaboration software - Liferay.com" href="http://www.liferay.com/" target="_blank">Liferay</a>. In this post I will explain the solution we came up with.</p><p>But first lets have a quick look at the problem again: We needed to support different styles per portlet and ‘read more’ links which needed to work for both custom and out-of-the-box potlets. Let have a look at some of the different ‘web-content display portlet’ styles used in the portal:</p><table><tbody><tr><td><img class="size-full wp-image-836" style="width: 172px; height: 120px;" title="web content display portlet 1" src="http://www.devatwork.nl/wp-content/uploads/2010/12/web-content-display-portlet-1.png" alt="" width="206" height="142" /></td><td><img class="size-full wp-image-837" style="width: 172px; height: 120px;" title="web content display portlet 2" src="http://www.devatwork.nl/wp-content/uploads/2010/12/web-content-display-portlet-2.png" alt="" width="244" height="144" /></td><td><img class="size-full wp-image-838" style="width: 172px; height: 120px;" title="web content display portlet 3" src="http://www.devatwork.nl/wp-content/uploads/2010/12/web-content-display-portlet-3.png" alt="" width="211" height="246" /></td></tr></tbody></table><p>Liferay, at least not version 5.2.8 EE, does not support these requirements out of the box (Not entirely true: Liferay does allow you to specify custom CSS rules per portlet instance, but you would need a front-end specialist to maintain the website which IMHO is not acceptable).</p><p>To make it even more difficult we were not allowed to use Liferay Ext or place many hooks or have impact on existing communities in the portal instance.</p><p>The solution that we came up with was to use an JSP hook to replace Liferays ‘look and feel’ page. We wrote some code which would add a new tab displaying theme specific properties to the page if the theme had a specific setting specifying the path to a velocity template which in turn would render the theme specific settings.</p><p>Some of the settings we included are:</p><ul><li>Custom CSS classes</li><li>Display mode</li><li>Read more link URL &amp; label</li></ul><p>However, we can easily add more, or less, properties depending on the requirements without having to touch the implementation code or break the theme for Kluwer Support.</p><p>Next we implemented a servlet which handles the storage of our custom properties. The servlet simple updates the portlet preferences with the custom properties. The properties are read by the theme and used to determine how to render the portlet.</p><p>We all implemented this in a separate deployment package except for the mentioned velocity template which resided in the theme package. By doing this, we solved the problem not only for this project but for upcoming projects as well: We will just implement a theme and the velocity template containing the custom properties for that particular project! I am willing to share some code, let met know if you want it.</p><p>I am very curious about the way you would have solved this problem and what you think of this solution so please write a comment.</p>]]></description>
            <link>http://devatwork.nl/posts/2010/solving-the-portlet-design-problem</link>
            <guid isPermaLink="true">http://devatwork.nl/posts/2010/solving-the-portlet-design-problem</guid>
            <dc:creator><![CDATA[Bert Willems]]></dc:creator>
            <pubDate>Wed, 22 Dec 2010 00:00:00 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[Building Kluwer Support Portal - a Developers Perspective]]></title>
            <description><![CDATA[<p>In the past two months we (<a title="Liones, Internetbureau voor uitgevers" href="http://www.liones.nl/" target="_blank">Liones</a>) build a new <a title="Enterprise open source portal and collaboration software - Liferay.com" href="http://www.liferay.com/" target="_blank">Liferay</a> based portal for <a title="Kluwer - a Wolters Kluwer business" href="http://www.kluwer.nl" target="_blank">Kluwer</a> (a major Dutch publisher), one of our clients. The purpose of this portal is to help the customers of Kluwer online products to understand and use their products better. This week the <a title="Kluwer Support" href="http://www.kluwer.nl/support/" target="_blank">Kluwer Support</a> portal was launched with success and I reckoned this was a good moment to share some insight in how we developed that particular portal and what problems we encountered during the development.</p><p>But let’s have a look at the result first:</p><p style="text-align: center;"><a href="/postcontent/kluwer-support.png"><img class="size-medium wp-image-832 aligncenter" title="Kluwer Support screenshot" src="/postcontent/kluwer-support-278x300.png" alt="" width="278" height="300" /></a></p><p>I hope you agree with me when I say that it looks great, I know for a fact a lot of people do. You can find the actual portal at <a title="Kluwer Support" href="http://www.kluwer.nl/support" target="_blank">http://www.kluwer.nl/support</a>, although the portal is in Dutch, feel free to look around.</p><p>In the next few paragraphs I will share some challenges we faced and the lessons we learned while implementing the Kluwer Support portal.</p><h3>Design</h3><p>One of the challenges for us in this project was to transform the graphical design, created by Evident, into HTML and then into a Liferay theme. Our front-end specialist, <a title="Vincent Smedinga" href="http://nl.linkedin.com/in/vincentsmedinga" target="_blank">Vincent Smedinga</a>, first transformed the PSD into HMTL using the latest versions of HTML 5, CSS 3 and other best front-end practices like Modernizr en Selectivzr. These technologies enabled him to create the HTML semantically correct, let it display correctly in older, less compliant browsers while staying true to the graphical design.</p><p>The now finished HTML needed to be transformed into Liferay components like themes, layouts and the actual portlets. That task proofed to be quiet challenging for <a title="Stef Busking" href="http://nl.linkedin.com/in/stefbusking" target="_blank">Stef Busking</a> (one of our Liferay software engineers) and me. The reason why this task was challenging is that fact that we needed to reuse as much standard Liferay components as possible. The two things that it so difficult and almost impossible were the different styles per portlet and the ‘read more’ links. Let have a look at some of the different ‘web-content display portlet’ styles used in the portal:</p><table><tbody><tr><td><img class="size-full wp-image-836" style="width: 172px; height: 120px;" title="web content display portlet 1" src="/postcontent/web-content-display-portlet-1.png" alt="" width="206" height="142" /></td><td><img class="size-full wp-image-837" style="width: 172px; height: 120px;" title="web content display portlet 2" src="/postcontent/web-content-display-portlet-2.png" alt="" width="244" height="144" /></td><td><img class="size-full wp-image-838" style="width: 172px; height: 120px;" title="web content display portlet 3" src="/postcontent/web-content-display-portlet-3.png" alt="" width="211" height="246" /></td></tr></tbody></table><p>Liferay, at least not version 5.2.8 EE, does not support these requirements out of the box (Not entirely true: Liferay does allow you to specify custom CSS rules per portlet instance, but you would need a front-end specialist to maintain the website which IMHO is not acceptable).</p><p>To make it even more difficult we were not allowed to use Liferay Ext or place many hooks or have impact on existing communities in the portal instance,  which, in my opinion, is a good thing. However, that forced us to think hard and we (although I should have said Stef here because he is the one who came up with the idea) found a clever solution to solve both problems with the use of one JSP hook.</p><p>I want you think about how you would have solved this problem in these fairly strict conditions. You can find <a title="Solving the Portlet Design Problem" href="http://www.devatwork.nl/2010/12/solving-the-portlet-design-problem/">the solution here</a>.</p><h3>Search</h3><p>Another problem we faced were the search requirements like ‘auto complete’ and sorting web content (FAQ entries and videos) according to their structure. We decided that the default Liferay search option would not be sufficient because we would not be able to implement the ‘auto complete’.</p><p>After researching several alternatives we choose to use one of the most powerful open-source enterprise search engines available: <a title="Apache Solr" href="http://lucene.apache.org/solr/" target="_blank">Apache Solr</a>. We implemented a client for it which uses the Liferay service bus to swap out the default Liferay search engine.</p><p>Now we had the proper infrastructure at our disposal it was a ‘trivial’ task to implement two custom portlets (search box in navigation bar and a result portlet). I quoted ‘trivial’ because it was not quiet trivial. We encountered a very annoying issue in the default web-content indexer Liferay provides:  it does not specify the structure ID nor the template ID in the document to be indexed.</p><p>I won’t go into specific how we solved this problem. It is sufficient to say that we are working on a robust solution which will ‘unpack’ the document  we receive from the indexer and enrich it with those fields before sending it to Solr for indexing.</p><h3>Wrap up</h3><p>Like always there is always more to share but that is really it for this post. Don’t forget to think about the ‘portlet design problem’ and stay tuned for our solution! As always: comments are most welcome.</p>]]></description>
            <link>http://devatwork.nl/posts/2010/building-kluwer-support-portal</link>
            <guid isPermaLink="true">http://devatwork.nl/posts/2010/building-kluwer-support-portal</guid>
            <dc:creator><![CDATA[Bert Willems]]></dc:creator>
            <pubDate>Fri, 17 Dec 2010 00:00:00 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[Extending your Successful Website: Improve your Search Engine]]></title>
            <description><![CDATA[<p>As I showed you in my previous post, <a title="Expanding your Website: Make your Visitors Feel Home" href="/posts/2009/make-your-visitors-feel-home">Expanding your Website: Make your Visitors Feel Home</a>, innovation on your website is a must in order to keep ahead of your competitors.</p><p>Everybody knows that making your content findable is important. There are numerous websites dedicated to optimizing your website for the Google, Yahoo, Bing and Ask. The term SEO (Search Engine Optimization) is commonly known and I am not going to talk about that!</p><p>In this article I am going to talk about improvements you can make to your website’s internal search engine. If your website does not contain a lot of content or the content is highly volatile this article might not be relevant for you.</p><p>However if your content is really specific, for example:</p><ul><li>Job offers</li><li>Location based (company addresses, houses, appliances, etc.)</li><li>Articles or Whitepapers about specific subjects</li></ul><p>This article is a must read for you. First we will get through 2 cases I made to give you idea in what ways you can improve the user experience. Next we will talk about different technologies and selection criteria for search engines.</p><h3>Case one: Job offers</h3><p>Job offers are an excellent example of location bound content, for example: if I live in Holland I really don’t care about job offers in America (unless I am thinking about immigrating there off course). Make sure your job offers have a country and preferably a city as search criteria. As a user I want to be able to search for jobs in a specific city or region. I want to supply a maximum distance I would be willing to commute to work.</p><p>I also want to be able to search jobs by:</p><ul><li>Category, for example: accountant, software developer or secretary</li><li>Branch, for example: public service or health care</li><li>Salary range</li></ul><p>I want be able to see what other criteria I can use to refine my initial search query. If the query is too specific I want to be able to turn off some of these filters to broaden the search.</p><h3>Case two: Article Archive</h3><p>Your first job is to figure out what separates one article from another, in this case study I assume that there are 7 main themes to which an article belongs. I expect to be able to browse through each theme using the navigation as well as search in all themes or a specific one.</p><h3>Technology</h3><p>There are a lot of different search technologies available out there; ranging from freeware software to 1 million euro plus commercial solutions. Which solution is the best? It depends on your needs and wishes, the needs and wishes of your users and your budget of course.</p><p>Let me give you an idea about the criteria for selecting a search engine:</p><ul><li>Precision, how relevant are the result returned from the search engine?</li><li>Recall, how much results which you expect to find are actually found?</li><li>Stop words, words like ‘a’, ‘in’ or ‘from’ are not relevant usually, does the search engine ignore those meaningless words?</li><li>Language support, the ability to handle different forms of a verb: 'walk’s' is equal to ‘walking; both are forms of the verb ‘to walk’. Every language is different. Some search engines can be tweaked to understand subtle differences in languages.</li><li>Synonyms, words that mean the same: automobile means the same as car.</li><li>Similarity, words that are related: a ‘car’ is a type of ‘vehicle’.</li><li>Performance, no one likes to wait half a minute for a result no matter how good it is.</li><li>Scalability, what happens when your site grows, can the search engine cope with that? Or will it come to a grinding halt?</li><li>Boosting, can you make one type of information more important than others? Or make news articles older than 2 weeks less important than new articles?</li><li>How often is the search index updated? Some engines update real-time, others update their index daily. If you have a site with volatile content you don’t want to wait a full day for it to become available in the search index.</li></ul><p>All those criteria together determine the search engine best suited for your site. Give each criterion enough thought before you make your decision. If you don’t feel confident you making the decision yourself consider hiring a specialist to support you. A proper search solution can make or break a site.</p><h3>User Interface</h3><p>A Visitor must be able to see a search box at all times, so visitors can perform Google style searching. This is the primary method users search through your content because visitors usually search with one or two keyword and use additional filters when they realize the result set is too big. The search box should be in a prominent and consistent spot on your site. After all: who wants to search for the search box?</p><p>The type of search criteria you offer depends on the content you have. Remember the case with the job content? A visitor could search on the term ‘manager’ and then filter on a specific branch. Criteria give visitors the idea that it will limit the result set, make sure a filter returns at least one result; otherwise a visitor will be disappointment. A good practice is to show the number of results which a filter will return after the name of the filter. This kind of refinement is also called drilldown or facetted search.</p><p>Another best practice is to help visitors to choose their keyword by guessing the word he/she tries to enter in the search box. This is called auto complete or search suggestion. Do not fill the auto suggest list with the entire dictionary but try to select words from the content domain. Also use this functionality to assist visitors to detect typos, the ‘Did you mean...’ functionality.</p><p>Present the search results like Google does: clean and simple. Only show the most relevant information. If the content contains several information types use a small icon to differentiate between them. If you really have a lot of information you feel that a visitor must be able to see, without going to the detail page, consider placing that information in a popup which will activate when a user hovers over it.</p><h3>Making Money with your Search Engine</h3><p>You might consider a search engine to be an unfortunately necessity, a waste of effort and money only needed to keep your visitors happy but you can actually make money with it, I will give you some tips for it.</p><p>There are plenty proven business models to make money here. Determine your model first and then determine the requirements for the search solution. Following these steps helps you from getting stuck with an expensive search solution earning you nothing.</p><p>A commercially interesting possibility with search is contextual targeting because you know what your visitors are looking for. A great example is Google Adwords, it shows you relevant ads for the search you are doing. Try searching on ‘buy house’ I bet there will be some ads about mortgages. Of course you are not limited to simple text ads; you can show banners as well.</p><p>If your website is about products of company presentations you might offer them to give their product a much bigger presentation in the search results so it will be a real eye catcher.</p><h3>Conclusion</h3><p>Adding a proper search engine to your website is a difficult job both technical and business wise. Although once you have gone through the pain you can actually make money with it!</p><p>That is it, I hope this information was useful to you and will help you select a search engine, help improve your existing solution and make some money off it. There are plenty proven business models to make money here. Determine your model first and then determine the requirements for the search solution. Following these steps helps you from getting stuck with an expensive search solution earning you nothing.</p>]]></description>
            <link>http://devatwork.nl/posts/2009/improve-your-site-search-engine</link>
            <guid isPermaLink="true">http://devatwork.nl/posts/2009/improve-your-site-search-engine</guid>
            <dc:creator><![CDATA[Bert Willems]]></dc:creator>
            <pubDate>Sat, 24 Oct 2009 00:00:00 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[Expanding your Website: Make your Visitors Feel Home]]></title>
            <description><![CDATA[<p>Okay, let's assume that your website is up and running, you have a steady visitor flow. <a title="Google" href="http://www.google.com/" target="_blank">Google</a>, <a title="Yahoo" href="http://www.yahoo.com/" target="_blank">Yahoo</a>, <a title="Ask" href="http://www.ask.com/" target="_blank">Ask</a> and <a title="Bing" href="http://www.bing.com/" target="_blank">Bing</a> know how to find your website and acknowledge you as a valuable source of information. You add new content on a daily basis and your content is valuable to your visitors as you can see in your statistics tool. Your banner positions are filled and revenue is coming in, time to sit back and let the money come to you right?</p><p><strong>No</strong>, for one single reason: the competition will eventually catch up with you. You have to keep improving continuously to prevent competitors to catch up with you. How? Listen to the demands and wishes of your visitors! You have got to remember that they are in charge of your site, not you! Why? They are not loyal, they don't love you and they have a choice to go to a new player on your market or an innovating competitor.</p><p>How can I learn what my visitors want, you ask yourself?</p><ul><li>Do not assume anything. Your visitors have a mind      of their own.</li><li>Analyze your statistics; understand what your      users are doing on your website. It really pays off to take a course in      <a title="Google Analytics" href="http://www.google.com/analytics/" target="_blank">Google Analytics</a> (or any other statistics tool) or hire a consultant to do      this job for you. For example: identify pages which cause visitors to      leave (= loose potential income) your website, they might not live up to      the expectations that your visitors have of your website.</li><li>Ask them. Send them a questionnaire about your      website in trade of a small gift. Maybe a subscription for a month to your      commercial content or a free report. Remember: you have to give in order      to receive!</li><li>Analyze the website of your competitors,      understand the strength and weaknesses of their websites and use that      knowledge to improve your website. I am not suggesting that you should      copy their websites, just learn from their successes and failures. Innovating      is more important than providing the same functionality as your      competitors.</li><li>Ask the experts. Your website is most likely      build by someone else than yourself, ask those guys for advice. Make sure      those guys know what they are doing: their core business is developing and      maintaining websites like your own. If you don't think your supplier is up      to that job, hire a consultant from a different company.</li></ul><p>I am sure there are a lot more advices to give and I invite you to add your own to this list as well as comment on the current ones. I started this post with the idea of improving the internal search engine of websites but I didn't have the time to do it yet. Don't worry though; I will post a follow up about that subject as soon as I can.</p><p>In the mean while I hope this advice helps you to improve your website's visitor count and your revenue!</p>]]></description>
            <link>http://devatwork.nl/posts/2009/make-your-visitors-feel-home</link>
            <guid isPermaLink="true">http://devatwork.nl/posts/2009/make-your-visitors-feel-home</guid>
            <dc:creator><![CDATA[Bert Willems]]></dc:creator>
            <pubDate>Tue, 23 Jun 2009 00:00:00 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[Baking IL With DynamicMethod]]></title>
            <description><![CDATA[<p>At the moment I am building a new script engine which is consists of text and expressions embedded in them. Those expressions are basically calls to functions and have any number of arguments. The implementation of those functions is done in C#.</p><p>At compile time I don't know which methods are going to be called so I have to invoke them at runtime. The most obvious way to do that is to use the reflection API of .NET to do a late bound method call. Although, IMHO, this is a perfectly valid solution to this problem it isn't exactly fast.</p><p>System.Reflection.Emit.DynamicMethod is a better alternative for late bound method invocation when it comes to performance. Although it requires you to write Intermediate Language (IL) it is actually quite easy to use.</p><p>Let me first show you an example:</p><pre class="highlight"><code class="cs"><span class="keyword">public</span> <span class="keyword">class</span> Program
{
 <span class="keyword">public</span> <span class="keyword">delegate</span> <span class="keyword">void</span> SayHello(<span class="keyword">string</span> name);
 
 <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> Main(<span class="keyword">string</span>[] args)
 {
  <span class="keyword">var</span> sayHelloMethod = BakeHelloMethod();
  sayHelloMethod(<span class="string">"Trilobyte"</span>);
 }
 
 <span class="keyword">public</span> <span class="keyword">static</span> SayHello BakeHelloMethod()
 {
  <span class="comment">// get the System.Console.Write method</span>
  Type consoleType = <span class="keyword">typeof</span> (Console);
  MethodInfo writeMethodInfo = consoleType.GetMethod(<span class="string">"Write"</span>, <span class="keyword">new</span>[] {<span class="keyword">typeof</span> (<span class="keyword">string</span>)});
  
  <span class="comment">// create a new dynamic method with return type void and one argument of type string and get its IL generator</span>
  <span class="keyword">var</span> dynamicMethod = <span class="keyword">new</span> DynamicMethod(string.Empty, <span class="keyword">typeof</span> (<span class="keyword">void</span>), <span class="keyword">new</span>[] {<span class="keyword">typeof</span> (<span class="keyword">string</span>)});
  ILGenerator methodGenerator = dynamicMethod.GetILGenerator();
  
  <span class="comment">// first write 'Hello, '</span>
  methodGenerator.Emit(OpCodes.Ldstr, <span class="string">"Hello, "</span>);
  methodGenerator.Emit(OpCodes.Call, writeMethodInfo);
  
  <span class="comment">// next write the name which is the first argument</span>
  methodGenerator.Emit(OpCodes.Ldarg_0);
  methodGenerator.Emit(OpCodes.Call, writeMethodInfo);
  
  <span class="comment">// finish the method</span>
  methodGenerator.Emit(OpCodes.Ret);
  
  <span class="comment">// create a delegate to the method we just created</span>
  <span class="keyword">return</span> (SayHello)dynamicMethod.CreateDelegate(<span class="keyword">typeof</span> (SayHello));
 }
}
</code></pre><p>Creating a late bound method call using DynamicMethod isn't as complex as you might think. It only took 10 lines of code to generate a functional method. The only difficult part is baking the IL yourself, but you can use tool like <a title=".NET Reflector" href="http://www.red-gate.com/products/reflector/">Reflector</a> to decompile C# code and see how it works in IL.</p><p>Although I don't use IL very often, maybe once a year, I still find it a useful tool to optimize performance of applications and I recommend to invest some time in learning the basics because it gives you a great insight in how the CLR actually works.</p><p>Cheers!</p>]]></description>
            <link>http://devatwork.nl/posts/2009/baking-il-with-dynamicmethod</link>
            <guid isPermaLink="true">http://devatwork.nl/posts/2009/baking-il-with-dynamicmethod</guid>
            <dc:creator><![CDATA[Bert Willems]]></dc:creator>
            <pubDate>Sun, 31 May 2009 00:00:00 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[Model View ViewModel ( M-V-VM )]]></title>
            <description><![CDATA[<p>Recently I have been working on a Windows Presentation Foundation (WPF) application designed to manage tasks. It is not the first time I developed an application in WPF. However, I was struggling with the same problem I was struggling with before:</p><p><strong>The problem: Coupling my views (WPF) to my domain model (C#).</strong></p><p>The solution I came up with back then is to make the domain model aware of the need to bind and implement specific functionality like [<a title="System.ComponentModel.INotifyPropertyChanged" href="http://msdn.microsoft.com/en-us/library/system.componentmodel.inotifypropertychanged.aspx">System.ComponentModel.INotifyPropertyChanged</a>]. By doing this I cluttered my domain model with non domain model code, which made the model difficult to understand and maintain, basically: No Go!</p><p><strong>The solution: Model-View-ViewModel pattern</strong></p><p>I went out looking for pattern that could help me to eliminate this code cluttering. After doing some research using my favorite search engine I discovered that there was a pattern for this problem: Model - View - ViewModel (MVVM or M-V-VM).</p><p>This pattern basically says: just wrap your domain model in another model, the view model, and implement view specific logic (like: INotifyPropertyChanged) on that view model.</p><p>I also implemented my commands on this view model class, I could have factored it out to view controllers but I didn't see the need for that right now.</p><p>For the implementation of the commands I choose the solutions suggested by [<a title="Karl on WPF" href="http://karlshifflett.wordpress.com">Karl on WPF</a>] and [<a title="Josh Smith on WPF" href="http://joshsmithonwpf.wordpress.com/">Josh Smith</a>]: the RelayCommand class. The purpose of this class is to drastically reduce the number of command needed by providing a single class which takes a delegate to execute the actual command. It also contains some logic to hook into the WPF command infrastructure.</p><p>Here is my implementation of the RelayCommand in C#:</p><pre class="highlight"><code class="cs"><span class="keyword">public</span> <span class="keyword">class</span> RelayCommand: ICommand
{
 <span class="keyword">private</span> <span class="keyword">readonly</span> Predicate&lt;<span class="keyword">object</span>&gt; canExecuteMethod;
 <span class="keyword">private</span> <span class="keyword">readonly</span> Action&lt;/<span class="keyword">object</span>&gt;&lt;<span class="keyword">object</span>&gt; executeMethod;
 <span class="keyword">public</span> RelayCommand(Action&lt;/<span class="keyword">object</span>&gt;&lt;<span class="keyword">object</span>&gt; executeMethod): <span class="keyword">this</span>(executeMethod, <span class="keyword">null</span>) {}
 
 <span class="keyword">public</span> RelayCommand(Action&lt;/<span class="keyword">object</span>&gt;&lt;<span class="keyword">object</span>&gt; executeMethod, Predicate&lt;/<span class="keyword">object</span>&gt;&lt;<span class="keyword">object</span>&gt; canExecuteMethod)
 {
  <span class="comment">// validate argument</span>
  <span class="keyword">if</span> (executeMethod == <span class="keyword">null</span>)
   <span class="keyword">throw</span> <span class="keyword">new</span> ArgumentNullException(<span class="string">"executeMethod"</span>);
   
  <span class="comment">// set values</span>
  this.executeMethod = executeMethod;
  this.canExecuteMethod = canExecuteMethod;
 }
 <span class="preprocessor">#<span class="keyword">region</span> ICommand Members</span>
 <span class="comment"><span class="xmlDocTag">///</span><span class="xmlDocTag">&lt;summary&gt;</span></span>
 <span class="comment"><span class="xmlDocTag">///</span>Occurs when changes occur that affect whether or not the command can execute.</span>
 <span class="comment"><span class="xmlDocTag">///</span><span class="xmlDocTag">&lt;/summary&gt;</span></span>
 <span class="keyword">public</span> <span class="keyword">event</span> EventHandler CanExecuteChanged
 {
  add
  {
   <span class="keyword">if</span> (canExecuteMethod != <span class="keyword">null</span>)
    CommandManager.RequerySuggested += <span class="keyword">value</span>;
  }
  remove
  {
   <span class="keyword">if</span> (canExecuteMethod != <span class="keyword">null</span>)
    CommandManager.RequerySuggested -= <span class="keyword">value</span>;
  }
 }
 <span class="comment"><span class="xmlDocTag">///</span> <span class="xmlDocTag">&lt;summary&gt;</span></span>
 <span class="comment"><span class="xmlDocTag">///</span> Defines the method to be called when the command is invoked.</span>
 <span class="comment"><span class="xmlDocTag">///</span> <span class="xmlDocTag">&lt;/summary&gt;</span></span>
 <span class="comment"><span class="xmlDocTag">///</span> <span class="xmlDocTag">&lt;param name="parameter"&gt;</span>Data used by the command.  If the command does not require data to be passed, this object can be set to null.<span class="xmlDocTag">&lt;/param&gt;</span></span>
 <span class="keyword">public</span> <span class="keyword">void</span> Execute(<span class="keyword">object</span> parameter)
 {
  executeMethod(parameter);
 }
 <span class="comment"><span class="xmlDocTag">///</span> <span class="xmlDocTag">&lt;summary&gt;</span></span>
 <span class="comment"><span class="xmlDocTag">///</span> Defines the method that determines whether the command can execute in its current state.</span>
 <span class="comment"><span class="xmlDocTag">///</span> <span class="xmlDocTag">&lt;/summary&gt;</span></span>
 <span class="comment"><span class="xmlDocTag">///</span> <span class="xmlDocTag">&lt;returns&gt;</span></span>
 <span class="comment"><span class="xmlDocTag">///</span> true if this command can be executed; otherwise, false.</span>
 <span class="comment"><span class="xmlDocTag">///</span> <span class="xmlDocTag">&lt;/returns&gt;</span></span>
 <span class="comment"><span class="xmlDocTag">///</span> <span class="xmlDocTag">&lt;param name="parameter"&gt;</span>Data used by the command.  If the command does not require data to be passed, this object can be set to null.<span class="xmlDocTag">&lt;/param&gt;</span></span>
 <span class="keyword">public</span> <span class="keyword">bool</span> CanExecute(<span class="keyword">object</span> parameter)
 {
  <span class="keyword">return</span> canExecuteMethod == <span class="keyword">null</span> ? <span class="keyword">true</span> : canExecuteMethod(parameter);
 }
 <span class="preprocessor">#<span class="keyword">endregion</span></span>
 <span class="keyword">public</span> <span class="keyword">void</span> RaiseCanExecuteChanged(EventArgs e)
 {
  CommandManager.InvalidateRequerySuggested();
 }
}

<span class="keyword">public</span> <span class="keyword">class</span> RelayCommand&lt;t&gt;: ICommand
{
 <span class="keyword">private</span> <span class="keyword">readonly</span> Predicate&lt;/t&gt;&lt;t&gt; canExecuteMethod;
 <span class="keyword">private</span> <span class="keyword">readonly</span> Action&lt;/t&gt;&lt;t&gt; executeMethod;
 <span class="keyword">public</span> RelayCommand(Action&lt;/t&gt;&lt;t&gt; executeMethod): <span class="keyword">this</span>(executeMethod, <span class="keyword">null</span>) {}
 
 <span class="keyword">public</span> RelayCommand(Action&lt;/t&gt;&lt;t&gt; executeMethod, Predicate&lt;/t&gt;&lt;t&gt; canExecuteMethod)
 {
  <span class="comment">// validate argument</span>
  <span class="keyword">if</span> (executeMethod == <span class="keyword">null</span>)
   <span class="keyword">throw</span> <span class="keyword">new</span> ArgumentNullException(<span class="string">"executeMethod"</span>);
   
  <span class="comment">// set values</span>
  this.executeMethod = executeMethod;
  this.canExecuteMethod = canExecuteMethod;
 }
 <span class="preprocessor">#<span class="keyword">region</span> ICommand Members</span>
 <span class="comment"><span class="xmlDocTag">///</span><span class="xmlDocTag">&lt;summary&gt;</span></span>
 <span class="comment"><span class="xmlDocTag">///</span>Occurs when changes occur that affect whether or not the command can execute.</span>
 <span class="comment"><span class="xmlDocTag">///</span><span class="xmlDocTag">&lt;/summary&gt;</span></span>
 <span class="keyword">public</span> <span class="keyword">event</span> EventHandler CanExecuteChanged
 {
  add
  {
   <span class="keyword">if</span> (canExecuteMethod != <span class="keyword">null</span>)
    CommandManager.RequerySuggested += <span class="keyword">value</span>;
  }
  remove
  {
   <span class="keyword">if</span> (canExecuteMethod != <span class="keyword">null</span>)
    CommandManager.RequerySuggested -= <span class="keyword">value</span>;
  }
 }
 
 <span class="comment"><span class="xmlDocTag">///</span> <span class="xmlDocTag">&lt;summary&gt;</span></span>
 <span class="comment"><span class="xmlDocTag">///</span> Defines the method to be called when the command is invoked.</span>
 <span class="comment"><span class="xmlDocTag">///</span> <span class="xmlDocTag">&lt;/summary&gt;</span></span>
 <span class="comment"><span class="xmlDocTag">///</span> <span class="xmlDocTag">&lt;param name="parameter"&gt;</span>Data used by the command.  If the command does not require data to be passed, this object can be set to null.<span class="xmlDocTag">&lt;/param&gt;</span></span>
 <span class="keyword">public</span> <span class="keyword">void</span> Execute(<span class="keyword">object</span> parameter)
 {
  executeMethod((T)parameter);
 }
 <span class="comment"><span class="xmlDocTag">///</span> <span class="xmlDocTag">&lt;summary&gt;</span></span>
 <span class="comment"><span class="xmlDocTag">///</span> Defines the method that determines whether the command can execute in its current state.</span>
 <span class="comment"><span class="xmlDocTag">///</span> <span class="xmlDocTag">&lt;/summary&gt;</span></span>
 <span class="comment"><span class="xmlDocTag">///</span> <span class="xmlDocTag">&lt;returns&gt;</span></span>
 <span class="comment"><span class="xmlDocTag">///</span> true if this command can be executed; otherwise, false.</span>
 <span class="comment"><span class="xmlDocTag">///</span> <span class="xmlDocTag">&lt;/returns&gt;</span></span>
 <span class="comment"><span class="xmlDocTag">///</span> <span class="xmlDocTag">&lt;param name="parameter"&gt;</span>Data used by the command.  If the command does not require data to be passed, this object can be set to null.<span class="xmlDocTag">&lt;/param&gt;</span></span>
 <span class="keyword">public</span> <span class="keyword">bool</span> CanExecute(<span class="keyword">object</span> parameter)
 {
  <span class="keyword">return</span> canExecuteMethod == <span class="keyword">null</span> ? <span class="keyword">true</span> : canExecuteMethod((T)parameter);
 }
 <span class="preprocessor">#<span class="keyword">endregion</span></span>
 <span class="keyword">public</span> <span class="keyword">void</span> RaiseCanExecuteChanged(EventArgs e)
 {
  CommandManager.InvalidateRequerySuggested();
 }
}
</code></pre><p><strong>Conclusion</strong></p><p>The MVVM pattern is a great pattern which allows you to separate the WPF view from your domain model, preventing code cluttering. I recommend every WPF or Silverlight developer to look into this pattern and use it when you encounter the same problem I had.</p><p><strong>References:</strong></p><p><a title="Karl on WPF" href="http://karlshifflett.wordpress.com/mvvm/">http://karlshifflett.wordpress.com/mvvm/</a></p><p><a title="Josh Smith on WPF" href="http://joshsmithonwpf.wordpress.com/category/mvvm/">http://joshsmithonwpf.wordpress.com/category/mvvm/</a></t></object></p>]]></description>
            <link>http://devatwork.nl/posts/2009/mvvm</link>
            <guid isPermaLink="true">http://devatwork.nl/posts/2009/mvvm</guid>
            <dc:creator><![CDATA[Bert Willems]]></dc:creator>
            <pubDate>Sun, 15 Feb 2009 00:00:00 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[Designing an Online Shopping Cart, an Architects Tale]]></title>
            <description><![CDATA[<p>For my work at Liones I am writing a technical design for a shopping cart. The requirements are fairly basic, except for one: the shopping cart must be generic to support any payment service provider (psp) and customer relationship management (CRM) system. Also there might be several different product types in the future, like: subscriptions, downloads, pay per use, etc.. These requirements make the shop very complex and a great challenge.</p><p>I started with an investigation on the internet about this subject and I quickly found out that there aren't much articles on this topic around, but I found a few very interesting ones though. Next I started to draw some UML diagrams; I added some best practices like the Money class.</p><p>Then it got interesting: <a title="Yvonne Arnoldus" href="http://www.linkedin.com/pub/2/81b/275" target="_blank">Yvonne</a> (a colleague, senior/lead developer) and I were going over my conceptual model and we were adding and shifting responsibilities as we were going. Things went rapid from that point on: object came to the surface, responsibilities were put on the right place and the domain model started to reveal itself.</p><p>The next thing we did was to group objects into packages and again there was some debate about in which package we would put certain objects and what the dependencies between the packages were. The debates made the domain model even clearer. We came up with the following packages:</p><ul><li>Product Catalog (Product information and grouping)</li><li>Cart (The actual cart)</li><li>Payment Service (Encapsulation of different payment service providers)</li><li>CRM (synchronization with back office)</li><li>User (User &amp; Profile)</li></ul><p>I am not going to discuss the packages in detail here because that is not the scope of this post.</p><p>Once we wrapped up that session, I drew the new UML diagrams (in <a title="Sparx Enterprise Architect" href="http://www.sparxsystems.com.au/products/ea/index.html" target="_blank">Sparx Enterprise Architect</a>). I made some minor refinements in the model and I set up a meeting with Yvonne and <a title="Gjalt Wijma" href="http://www.linkedin.com/pub/6/250/b8" target="_blank">Gjalt</a> (another colleague, architect) to review the technical design.</p><p>As the review session went on, we made a few minor refinements on the design and discussed how certain parts could be implemented. There was one major element that wasn't clear: how does the coupling with a payment service provider work? There seem to be 2 categories: synchronous payments and asynchronous payments.</p><p>That is where we stand now, we brainstormed on how to tackle the payment problems but that is for part 2!</p>]]></description>
            <link>http://devatwork.nl/posts/2009/designing-a-shopping-cart</link>
            <guid isPermaLink="true">http://devatwork.nl/posts/2009/designing-a-shopping-cart</guid>
            <dc:creator><![CDATA[Bert Willems]]></dc:creator>
            <pubDate>Sat, 14 Feb 2009 00:00:00 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[The Union Architecture]]></title>
            <description><![CDATA[<p>One of the key problems in software development, especially framework development, is finding a flexible and future proof architecture. The architect basically needs to have a crystal ball to see the future. There are some techniques and development choices which can reduce the costs of change but it is inevitable that you will hit a limit eventually.</p><p>In this post I am going to talk about 1 architectural pattern which can extend the lifetime of a framework significantly. That pattern is the ‘Onion Architecture'.</p><p>The ‘Onion Architecture' is a pattern originally composed by ‘<a title="Jeffrey Palermo" href="http://jeffreypalermo.com/">Jeffrey Palermo</a>' and it basically says: put the conceptual model and services in the inner most layer and provide the implementation for the conceptual model and services in the outer layers together with the user interface, data access layer and other implementation details which are subject to change.</p><p>The further away from the core a layer is, the more likely it is to change and the easier to change.</p><p>A layer in the ‘Onion Architecture' can interact to any layer below it, including the core. However, it can't interact to any layer above it. This guarantees that more outer layers can be changed without the need to change an inner layer.</p><p>One important detail is that a layer isn't the same as one component. Each layer can contain multiple components, like the image below demonstrates:</p><figure><img src="/postcontent/onion-architecture.png" alt="The Onion Architecture"/><figcaption>Thanks to Jeffrey Palermo for this image</figcaption></figure><p>In short, the ‘Onion Architecture' allows you to:</p><ul><li>Effectively and logically separate concept from implementation.</li><li>Create a dynamic and future proof architecture.</li><li>Replace outdated or ‘rotten' layers.</li><li>Introduce new components to layers without changing the inner layers</li></ul><p>That is it for now; I hope this post gives you a better insight in how to prepare your architecture for change and extendibility. If you have any question please feel free to ask them!</p><strong>Sources</strong><ul><li><a href="http://jeffreypalermo.com/blog/the-onion-architecture-part-1/">http://jeffreypalermo.com/blog/the-onion-architecture-part-1/</a></li><li><a href="http://jeffreypalermo.com/blog/the-onion-architecture-part-2/">http://jeffreypalermo.com/blog/the-onion-architecture-part-2/</a></li><li><a href="http://jeffreypalermo.com/blog/the-onion-architecture-part-3/">http://jeffreypalermo.com/blog/the-onion-architecture-part-3/</a></li></ul>]]></description>
            <link>http://devatwork.nl/posts/2008/union-architecture</link>
            <guid isPermaLink="true">http://devatwork.nl/posts/2008/union-architecture</guid>
            <dc:creator><![CDATA[Bert Willems]]></dc:creator>
            <pubDate>Fri, 26 Sep 2008 00:00:00 GMT</pubDate>
        </item>
    </channel>
</rss>